# -*- coding: utf-8 -*-
"""Preprocessing_final.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1V0nEa_5o1tBYLZthTbb4y8sv-TxdRRAX
"""

import pandas as pd
import os
pd.set_option('display.max_columns', None)
pd.set_option('display.max_rows', None)

"""# 경락정보_전국 도매"""

df = pd.read_csv('train/meta/TRAIN_경락정보_전국도매_2018-2022.csv', encoding = 'utf-8')
df = df[['YYYYMMSOON','품목명','총반입량(kg)']]
df = df.groupby(['YYYYMMSOON', '품목명'], as_index = False).sum()
pivot_df = df.pivot_table(index='YYYYMMSOON', columns='품목명', values='총반입량(kg)', fill_value= pd.NA)
pivot_df = pivot_df.drop('순무', axis = 1)
pivot_df = pivot_df.rename(columns={
    'YYYYMMSOON':'YYYYMMSOON',
    "감자": "감자 수미_총반입량",
    "대파": "대파(일반)_총반입량",
    "마늘": "깐마늘(국산)_총반입량",
    "무": "무_총반입량",
    "배": "배_총반입량",
    "배추": "배추_총반입량",
    "사과": "사과_총반입량",
    "상추": "상추_총반입량",
    "양파": "양파_총반입량"})
pivot_df.to_csv('wide.csv')

all_data = []

time1 = []
time2 = []
for i in range(52):
    file_name = f'TEST_경락정보_전국도매_{i:02d}.csv'
    file_path = os.path.join('test/meta/', file_name)
    data = pd.read_csv(file_path)
    data = data[['YYYYMMSOON','품목명','총반입량(kg)']]
    data = data.groupby(['YYYYMMSOON', '품목명'], as_index = False).sum()
    data = data.pivot_table(index='YYYYMMSOON', columns='품목명', values='총반입량(kg)', fill_value= pd.NA).reset_index()

    시점 = file_name.replace('.csv', '').replace('_경락정보_전국도매', '')
    data['시점'] = 시점

    origin_T = data['YYYYMMSOON'].max()
    time1.append(origin_T)
    time2.append(시점)
    data = data.reset_index(drop = True)
    all_data.append(data)

test_1 = pd.concat(all_data, ignore_index=True)
time_pairs = list(zip(time1, time2))

def create_shifted_features(df, num_shifts=8):
  for col in df.columns.difference(['YYYYMMSOON','시점']):
    for i in range(1, num_shifts + 1):
        df[f'{col}_T-{i}'] = df[col].shift(i)
  return df

test_1.drop('순무', axis =1, inplace = True)
test_1 = test_1.rename(columns={
    'YYYYMMSOON':'YYYYMMSOON',
    "감자": "감자 수미_총반입량",
    "대파": "대파(일반)_총반입량",
    "마늘": "깐마늘(국산)_총반입량",
    "무": "무_총반입량",
    "배": "배_총반입량",
    "배추": "배추_총반입량",
    "사과": "사과_총반입량",
    "상추": "상추_총반입량",
    "양파": "양파_총반입량"})

test_1 =  create_shifted_features(test_1)

final_data = test_1

filtered_df_list = []  # 필터링된 결과를 담을 리스트

for t1, t2 in time_pairs:
    temp_df = final_data[(final_data['YYYYMMSOON'] == t1) & (final_data['시점'] == t2)].copy()  # 먼저 time1 조건으로 필터링
    if not temp_df.empty:
        filtered_df_list.append(temp_df)

if filtered_df_list:
    final_data = pd.concat(filtered_df_list)
else:
    final_data = pd.DataFrame()
final_data = final_data.reset_index(drop = True)
final_data.to_csv('wide_test.csv',index=False, encoding='CP949')

"""# 기상 데이터"""

import pandas as pd
def convert_to_yyyymmsoon(date):
    year_month = date.replace("-", "").replace(" ", "")[:6]
    day = int(date[-2:])  # Extracts 'DD' as an integer

    # Determine '순' based on the day
    if day <= 10:
        soon = "상순"
    elif day <= 20:
        soon = "중순"
    else:
        soon = "하순"

    return f"{year_month}{soon}"

def process_precipitation_data(file_path, encoding='cp949', skiprows=12, max_cols=20, columns=None):
    # 기본 열 목록 설정
    # if columns is None:
    #     columns = ['일시', '평균일강수량(mm)', '최다일강수량(mm)']

    prefix = file_path.split('/')[-1].split('_')[0]  # 파일 경로 마지막 부분에서 '_' 앞부분 추출

    # 모든 행을 읽으며, 부족한 열은 NaN으로 채우기
    data = pd.read_csv(file_path, encoding=encoding, skiprows=skiprows, names=range(max_cols))

    # 첫 번째 행을 컬럼으로 지정하고 해당 행 삭제
    data.columns = data.loc[0].str.strip()
    data.drop(0, axis=0, inplace=True)

    # 선택한 열만 남기기
    data = data[columns]

    # '일시' 열이 있는 경우 'YYYYMMSOON' 형식으로 변환
    if '일시' in data.columns:
        data['YYYYMMSOON'] = data['일시'].apply(convert_to_yyyymmsoon)
        data.drop('일시', axis=1, inplace=True)

    # 마지막 열을 제외한 나머지 열을 numeric type으로 변환
    cols_to_convert = data.columns[:-1]  # 마지막 열 제외
    data[cols_to_convert] = data[cols_to_convert].apply(pd.to_numeric, errors='coerce')

    data.columns = [f"{prefix}_{col}" if col != 'YYYYMMSOON' else col for col in data.columns]

    # NaN 값을 0으로 채움
    data = data.fillna(0)
    return data

rain = process_precipitation_data('기상데이터/강원영동_강수량.csv',columns = ['일시', '평균일강수량(mm)']).drop('YYYYMMSOON', axis = 1)
temp = process_precipitation_data('기상데이터/강원영동_기온.csv', columns = ['일시', '평균기온(℃)']).drop('YYYYMMSOON', axis = 1)
humid = process_precipitation_data('기상데이터/강원영동_습도.csv', columns = ['일시', '평균습도(%rh)','최저습도(%rh)']).drop('YYYYMMSOON', axis = 1)
sun = process_precipitation_data('기상데이터/강원영동_일조일사.csv', columns = ['일시', '일조합(hr)','일사합(MJ/m2)'])
merged_data1 = pd.concat([rain,temp,sun, humid], axis=1).reset_index(drop = True).groupby('YYYYMMSOON', as_index=False).mean()
merged_data1.to_csv('weather.csv', encoding = 'cp949', index = False)

"""# 수출입 데이터"""

def inout(inpath, outpath, category):
  total = pd.DataFrame()
  data = pd.ExcelFile(inpath)
  df = data.parse(data.sheet_names[0], index = False)
  df = df[['DATE', '중량']].groupby('DATE').mean().reset_index()
  total[f'{category}_수입'] = df['중량']

  data = pd.ExcelFile(outpath)
  df = data.parse(data.sheet_names[0], index = False)
  df = df[['DATE', '중량']].groupby('DATE').mean().reset_index()
  total[f'{category}_수출'] = df['중량']

  return total

df_inout = pd.DataFrame()
data = pd.ExcelFile('수출입/감자_수입.xlsx')
data = data.parse(data.sheet_names[0], index = False)
data = data[['DATE', '중량']].groupby('DATE').mean().reset_index()
df_inout['DATE'] = data['DATE']
df1= inout('수출입/감자_수입.xlsx', '수출입/감자_수출.xlsx', '감자 수미')
df2= inout('수출입/무_수입.xlsx', '수출입/무_수출.xlsx', '무')
df3= inout('수출입/양파_수입.xlsx', '수출입/양파_수출.xlsx', '양파')
df4= inout('수출입/배추_수입.xlsx', '수출입/배추_수출.xlsx', '배추')
df5= inout('수출입/파_수입.xlsx', '수출입/파_수출.xlsx', '대파(일반)')
df6= inout('수출입/고추_수입.xlsx', '수출입/고추_수출.xlsx', '건고추')
df7= inout('수출입/마늘_수입.xlsx', '수출입/마늘_수출.xlsx', '깐마늘(국산)')
df8= inout('수출입/사과_수입.xlsx', '수출입/사과_수출.xlsx', '사과')
df9= inout('수출입/배_수입.xlsx', '수출입/배_수출.xlsx', '배')
df10= inout('수출입/상치_수입.xlsx', '수출입/상치_수출.xlsx', '상추')

df_final = pd.concat([df_inout, df1,df2,df3,df4,df5,df6,df7,df8,df9,df10], axis=1).reset_index(drop = True)


df_final['양파_수출'].fillna(568.6271186440678 , inplace=True)
df_final['배추_수입'].fillna(72816.54549707602 , inplace=True)
df_final['배추_수출'].fillna(167377.60120478648  , inplace=True)
df_final['대파(일반)_수출'].fillna(0, inplace=True)
df_final['상추_수입'].fillna(125537.73146892656 , inplace=True)
df_final['상추_수출'].fillna(5631.400059141424, inplace=True)

# na1 = df_final.loc[:58, '양파_수출'].mean()
# df_final['양파_수출'].fillna(na1, inplace=True)

# na2 = df_final.loc[:58, '배추_수입'].mean()
# df_final['배추_수입'].fillna(na2, inplace=True)

# na3 = df_final.loc[:58, '배추_수출'].mean()
# df_final['배추_수출'].fillna(na3, inplace=True)

# #na2 = df_final.loc[:58, '대파(일반)_수출'].mean()
# df_final['대파(일반)_수출'].fillna(0, inplace=True)

# na4 = df_final.loc[:58, '상추_수입'].mean()
# df_final['상추_수입'].fillna(na4, inplace=True)

# na5 = df_final.loc[:58, '상추_수출'].mean()
# df_final['상추_수출'].fillna(na5, inplace=True)

import pandas as pd
def expand_with_YYYYMMSOON(df):
    # 결과를 저장할 리스트
    result = []

    # 각 행에 대해 처리
    for _, row in df.iterrows():
        # DATE에서 년과 월 추출 (문자열로 변환하여 처리)
        date_str = str(int(row['DATE']))  # 소수점 문제를 해결하기 위해 int로 변환 후 문자열로 변환
        year = int(date_str[:4])
        month = int(date_str[4:6])

        # 한 달 이전으로 설정 (1월이면 전년도 12월로 이동)
        if month == 12:
            prev_year = year + 1
            prev_month = 1
        else:
            prev_year = year
            prev_month = month + 1

        # 새로운 YYYYMM 값 생성
        prev_date = f"{prev_year}{prev_month:02d}"
        date = f"{year}{month:02d}"
                # 일반적인 경우 한 달 전의 날짜로 생성
        for period in ['상순', '중순', '하순']:
            new_row = row.copy()
            new_row['YYYYMMSOON'] = f"{prev_date}{period}"
            result.append(new_row)

        # # '상순', '중순', '하순'에 대한 새 행 추가
        # if row['DATE'] == 202409:
        #     # 202409인 경우 202408 데이터를 복사하여 추가
        #     for period in ['상순', '중순', '하순']:
        #         new_row = row.copy()
        #         new_row['YYYYMMSOON'] = f"{int(row['DATE'])}{period}"  # 202409 상순, 중순, 하순
        #         #new_row['복사된_데이터'] = f"{prev_date}{period}"  # 202408의 데이터를 복사했다고 표시
        #         result.append(new_row)



    # 결과 리스트를 데이터프레임으로 변환
    expanded_df = pd.DataFrame(result)
    return expanded_df


# 함수 호출
expanded_df = expand_with_YYYYMMSOON(df_final)
expanded_df.drop('DATE', axis = 1, inplace = True)
expanded_df.to_csv('inout.csv', index = False)
expanded_df

"""# 유가데이터"""

def convert_to_yyyymmsoon(date):
    year_month = date.replace("-", "").replace(" ", "")[:6]
    day = int(date[-2:])  # Extracts 'DD' as an integer

    # Determine '순' based on the day
    if day <= 10:
        soon = "상순"
    elif day <= 20:
        soon = "중순"
    else:
        soon = "하순"

    return f"{year_month}{soon}"

df = pd.read_csv('WTI유 선물 과거 데이터.csv')
df['YYYYMMSOON'] = df['날짜'].apply(convert_to_yyyymmsoon)
df = df[['YYYYMMSOON', '종가']]
df = df.groupby('YYYYMMSOON').mean().reset_index()
df.to_csv('oil.csv', index = False)
df.shape

"""# function"""

import pandas as pd
import os

def load_and_concat_data(train_file, meta_file):
    train_data = pd.read_csv(train_file)
    meta_data = pd.read_csv(meta_file)
    combined_data = pd.concat([train_data, meta_data], axis=0).reset_index(drop=True)
    return combined_data

def process_item_data1(train_data, item_list, item_name):
    train_item = train_data[train_data['품목(품종)명'].str.contains(item_name, na=False)]
    train_item['sort'] = train_item['품목(품종)명'] + train_item['거래단위'] + train_item['등급(특 5% 상 35% 중 40% 하 20%)']
    train_item = train_item[train_item['sort'].isin(item_list)]
    train_item = train_item.sort_values(by=['sort', 'YYYYMMSOON']).reset_index(drop=True)
    train_item.drop(['sort'], axis=1, inplace=True)
    return train_item

def process_item_data2(train_data, item_list, item_name):
    train_item = train_data[train_data['품목명'].str.contains(item_name, na=False)]
    train_item['sort'] = train_item['품목명'] + train_item['품종명'] + train_item['유통단계별 단위 '].astype(str) + train_item['등급명']
    train_item = train_item[train_item['sort'].isin(item_list)]
    train_item = train_item.sort_values(by=['sort', 'YYYYMMSOON']).reset_index(drop=True)
    if item_name == '사과':
      train_item.loc[(train_item['품종명'] == '후지'), '품종명'] = '후지홍로'
      train_item.loc[(train_item['품종명'] == '홍로'), '품종명'] = '후지홍로'
      train_item.loc[(train_item['품종명'] == '후지홍로'), '품종코드 '] = 0
    train_item.drop(['sort'], axis=1, inplace=True)
    return train_item

def create_shifted_features(df, column_name, num_shifts=8):
    for i in range(1, num_shifts + 1):
        df[f'{column_name}_T-{i}'] = df[column_name].shift(i)
    return df

def create_future_features(df, column_name, num_future_shifts=3):
    for i in range(1, num_future_shifts + 1):
        df[f'{column_name}_{i}순'] = df[column_name].shift(-i)
    return df

"""# Train_1"""

############## STEP 1 ##############
train_file = 'train/train_1.csv'
meta_file = 'train/meta/TRAIN_경락정보_가락도매_2018-2022.csv'
train_1 = load_and_concat_data(train_file, meta_file)


cabbage_list = ['알배기배추8키로상자상', '알배기배추8키로상자특', '알배기배추8키로상자중', '쌈배추8키로상자하', '얼갈이배추4키로상자하',
                '쌈배추8키로상자특', '배추10키로망대하', '얼갈이배추4키로상자상', '얼갈이배추4키로상자중', '배추10키로망대상',
                '배추10키로망대중', '쌈배추8키로상자상', '쌈배추8키로상자중', '알배기배추8키로상자하', '배추10키로망대특']
moo_list = ['무20키로상자중', '열무4키로상자중', '열무4키로상자하', '무20키로상자상', '열무1.5키로단상', '무20키로상자하',
            '열무1.5키로단중', '열무1.5키로단하', '무20키로상자특', '열무4키로상자상']
onion_list = ['양파1키로중', '양파12키로특', '양파15키로중', '양파12키로하', '양파1키로상', '양파15키로하', '양파15키로상',
              '양파1키로하', '양파12키로중', '양파15키로특', '양파1키로특', '양파12키로상']
potato_list = ['감자 수미20키로상자특', '감자 수미20키로상자하', '감자 수미20키로상자상', '감자 수미20키로상자중']
daepa_list = ['대파(일반)1키로단상', '대파(일반)1키로단중', '대파(일반)1키로단하', '대파(일반)1키로단특']

train_1_cabbage = process_item_data1(train_1, cabbage_list, '배추')
train_1_moo = process_item_data1(train_1, moo_list, '무')
train_1_onion= process_item_data1(train_1, onion_list, '양파')
train_1_potato = process_item_data1(train_1, potato_list, '감자')
train_1_daepa = process_item_data1(train_1, daepa_list, '대파')



train_1_all = pd.concat([train_1_cabbage, train_1_moo, train_1_onion, train_1_potato, train_1_daepa], axis=0).reset_index(drop=True)

train_1_all.to_csv('train_1_all.csv', index=False, encoding='utf-8')


############## STEP 2 ##############
file_path = 'train_1_all.csv'
data = pd.read_csv(file_path)

shifted_data = data.groupby(['품목(품종)명', '가락시장 품목코드(5자리)', '거래단위', '등급(특 5% 상 35% 중 40% 하 20%)']).apply(lambda x: create_shifted_features(x, 'YYYYMMSOON')).reset_index(drop=True)
shifted_data = shifted_data.groupby(['품목(품종)명', '가락시장 품목코드(5자리)', '거래단위', '등급(특 5% 상 35% 중 40% 하 20%)']).apply(lambda x: create_shifted_features(x, '평균가격(원)')).reset_index(drop=True)
shifted_data = shifted_data.groupby(['품목(품종)명', '가락시장 품목코드(5자리)', '거래단위', '등급(특 5% 상 35% 중 40% 하 20%)']).apply(lambda x: create_shifted_features(x, '전순 평균가격(원) PreVious SOON')).reset_index(drop=True)
shifted_data = shifted_data.groupby(['품목(품종)명', '가락시장 품목코드(5자리)', '거래단위', '등급(특 5% 상 35% 중 40% 하 20%)']).apply(lambda x: create_shifted_features(x, '전순 평균가격(원) PreVious SOON')).reset_index(drop=True)
shifted_data = shifted_data.groupby(['품목(품종)명', '가락시장 품목코드(5자리)', '거래단위', '등급(특 5% 상 35% 중 40% 하 20%)']).apply(lambda x: create_shifted_features(x, '전달 평균가격(원) PreVious MMonth')).reset_index(drop=True)
shifted_data = shifted_data.groupby(['품목(품종)명', '가락시장 품목코드(5자리)', '거래단위', '등급(특 5% 상 35% 중 40% 하 20%)']).apply(lambda x: create_shifted_features(x, '전년 평균가격(원) PreVious YeaR')).reset_index(drop=True)
shifted_data = shifted_data.groupby(['품목(품종)명', '가락시장 품목코드(5자리)', '거래단위', '등급(특 5% 상 35% 중 40% 하 20%)']).apply(lambda x: create_shifted_features(x, '평년 평균가격(원) Common Year SOON')).reset_index(drop=True)

shifted_data = shifted_data.groupby(['품목(품종)명', '가락시장 품목코드(5자리)', '거래단위', '등급(특 5% 상 35% 중 40% 하 20%)']).apply(lambda x: create_future_features(x, '평균가격(원)')).reset_index(drop=True)
shifted_data = shifted_data.dropna()
shifted_data.rename(columns={'평균가격(원)_1순': '1순', '평균가격(원)_2순': '2순', '평균가격(원)_3순' : '3순'}, inplace=True)

shifted_data.to_csv('train_1_v2.csv',index=False, encoding='CP949')


############## STEP 3 ##############
train_file_path = 'train_1_v2.csv'
train_df = pd.read_csv(train_file_path, encoding='cp949')

data = {
    '품목(품종)명': ['배추', '무', '양파', '감자 수미', '대파(일반)'],
    '거래단위': ['10키로망대', '20키로상자', '1키로', '20키로상자', '1키로단'],
    '등급(특 5% 상 35% 중 40% 하 20%)': ['상', '상', '상', '상', '상']
}
df = pd.DataFrame(data)
transformed_item_dfs = {}

for _, criteria in df.iterrows():
    item = criteria['품목(품종)명']
    main_unit = criteria['거래단위']
    main_grade = criteria['등급(특 5% 상 35% 중 40% 하 20%)']

    main_variety_df = train_df[
        (train_df['품목(품종)명'] == item) &
        (train_df['거래단위'] == main_unit) &
        (train_df['등급(특 5% 상 35% 중 40% 하 20%)'] == main_grade)
    ].reset_index(drop=True)

    other_varieties_df = train_df[
        (train_df['품목(품종)명'] == item) &
        ~((train_df['거래단위'] == main_unit) & (train_df['등급(특 5% 상 35% 중 40% 하 20%)'] == main_grade))
    ].reset_index(drop=True)

    pivoted_varieties_df = other_varieties_df.pivot_table(
        index='YYYYMMSOON',
        columns=['거래단위', '등급(특 5% 상 35% 중 40% 하 20%)'],
        values=[col for col in other_varieties_df.columns if col not in ['YYYYMMSOON', '품목(품종)명', '거래단위', '등급(특 5% 상 35% 중 40% 하 20%)']],
        aggfunc='mean'
    ).reset_index()

    pivoted_varieties_df.columns = ['_'.join([str(c) for c in col if c]).strip() if isinstance(col, tuple) else col for col in pivoted_varieties_df.columns]
    merged_df = pd.merge(main_variety_df, pivoted_varieties_df, on='YYYYMMSOON', how='left')

    if item not in transformed_item_dfs:
        transformed_item_dfs[item] = []
    transformed_item_dfs[item].append(merged_df)

final_item_dfs = {item: pd.concat(dfs, ignore_index=True) for item, dfs in transformed_item_dfs.items()}

columns_to_keep = ['1순', '2순', '3순']
for item, df in final_item_dfs.items():
    columns_to_exclude = df.columns[df.columns.str.contains('1순|2순|3순') & ~df.columns.isin(columns_to_keep)]
    final_item_dfs[item] = df.drop(columns=columns_to_exclude)

for item, df in final_item_dfs.items():
    if (item != '대파(일반)'):
      meta1 = pd.read_csv(f'6_감자 수미_반입물량.xlsx_241023/{item}_반입물량.csv', encoding = 'cp949').sort_values('YYYYMMSOON').reset_index(drop = True)
      meta1 = meta1[['YYYYMMSOON','총반입량']]
      meta1 = create_shifted_features(meta1,'총반입량').dropna()
    meta2 = pd.read_csv(f'농촌경제연구원/{item}_확정거래물량.csv', encoding = 'cp949').sort_values('YYYYMMSOON').reset_index(drop = True)
    meta2.drop('품목명', axis = 1, inplace = True)
    for col in meta2.columns.difference(['품목명', 'YYYYMMSOON']):
      meta2 = create_shifted_features(meta2, col)
    meta2.dropna()
    merge_df = pd.merge(df, meta1, on='YYYYMMSOON', how='inner')
    merge_df = pd.merge(merge_df, meta2, on='YYYYMMSOON', how='inner')

    weather = pd.read_csv('weather.csv', encoding = 'cp949').reset_index(drop = True)
    for col in weather.columns.difference(['YYYYMMSOON']):
      weather = create_shifted_features(weather, col)
    merge_df = pd.merge(merge_df, weather, on='YYYYMMSOON', how='left')


    inout = pd.read_csv('inout.csv', encoding = 'utf-8').reset_index(drop = True)
    item_df = inout[[col for col in inout.columns if item in col and f"{item}추" not in col] + ['YYYYMMSOON']]

    for col in item_df.columns.difference(['YYYYMMSOON']):
      item_df = create_shifted_features(item_df, col)
    merge_df = pd.merge(merge_df, item_df, on='YYYYMMSOON', how='left')

    oil = pd.read_csv('oil.csv').reset_index(drop = True)
    merge_df = pd.merge(merge_df, oil, on='YYYYMMSOON', how='left')

    wide = pd.read_csv('wide.csv').reset_index(drop=True)
    wide_df = wide[[col for col in wide.columns if item in col and f"{item}추" not in col] + ['YYYYMMSOON']]
    wide_df = create_shifted_features(wide_df, f'{item}_총반입량')

    merge_df = pd.merge(merge_df, wide_df, on='YYYYMMSOON', how='left')
    merge_df.to_csv(f'train_{item}.csv', index=False, encoding='cp949')

"""# Train_2"""

############## STEP 1 ##############
train_file = 'train/train_2.csv'
meta_file1 = 'train/meta/TRAIN_중도매_2018-2022.csv'
train_2_1 = load_and_concat_data(train_file, meta_file1)

gochu_list = ['건고추화건30.0중품', '건고추화건30.0상품']
garlic_list = ['깐마늘(국산)깐마늘(남도)20.0중품', '깐마늘(국산)깐마늘(국산)20.0상품', '깐마늘(국산)깐마늘(대서)20.0중품']

train_2_gochu = process_item_data2(train_2_1, gochu_list, '고추')
train_2_garlic = process_item_data2(train_2_1, garlic_list, '마늘')

train_file = 'train/train_2.csv'
meta_file2 = 'train/meta/TRAIN_소매_2018-2022.csv'
train_2_2 = load_and_concat_data(train_file, meta_file2)

lettuce_list = ['상추적100.0중품', '상추청100.0상품', '상추적100.0상품']
pear_list = ['배신고10.0중품', '배신고10.0상품']
apple_list = ['사과후지10.0상품', '사과후지10.0중품', '사과홍로10.0중품', '사과홍로10.0상품']

train_2_lettuce = process_item_data2(train_2_2, lettuce_list, '상추')
train_2_pear = process_item_data2(train_2_2, pear_list, '배')

# 사과
train_2_apple = train_2_2[train_2_2['품목명'].str.contains('사과', na=False)]
apple = ['사과후지10.0상품', '사과후지10.0중품', '사과홍로10.0중품', '사과홍로10.0상품']
train_2_apple['sort'] = train_2_apple['품목명'] + train_2_apple['품종명'] + train_2_apple['유통단계별 단위 '].astype(str) + train_2_apple['등급명']
train_2_apple.sort_values(by=['YYYYMMSOON','sort'], inplace=True)
train_2_apple = train_2_apple[train_2_apple['sort'].isin(apple)]
train_2_apple = train_2_apple.reset_index(drop = True)
train_2_apple.loc[(train_2_apple['품종명'] == '후지'), '품종명'] = '후지홍로'
train_2_apple.loc[(train_2_apple['품종명'] == '홍로'), '품종명'] = '후지홍로'
train_2_apple.loc[(train_2_apple['품종명'] == '후지홍로'), '품종코드 '] = 0
train_2_apple.drop(['sort'],axis=1,inplace=True)

train_2_all = pd.concat([train_2_gochu, train_2_garlic, train_2_lettuce, train_2_pear, train_2_apple], axis=0).reset_index(drop=True)

train_2_all.to_csv('train_2_all.csv', index=False, encoding='utf-8')

############## STEP 2 ##############
file_path = 'train_2_all.csv'
data = pd.read_csv(file_path)

shifted_data = data.groupby(['품목명', '품목코드 ', '품종코드 ', '품종명','등급명', '유통단계별 무게 ', '유통단계별 단위 ']).apply(lambda x: create_shifted_features(x, 'YYYYMMSOON')).reset_index(drop=True)
shifted_data = shifted_data.groupby(['품목명', '품목코드 ', '품종코드 ', '품종명','등급명', '유통단계별 무게 ', '유통단계별 단위 ']).apply(lambda x: create_shifted_features(x, '평균가격(원)')).reset_index(drop=True)
shifted_data = shifted_data.groupby(['품목명', '품목코드 ', '품종코드 ', '품종명','등급명', '유통단계별 무게 ', '유통단계별 단위 ']).apply(lambda x: create_shifted_features(x, '전순 평균가격(원) PreVious SOON')).reset_index(drop=True)
shifted_data = shifted_data.groupby(['품목명', '품목코드 ', '품종코드 ', '품종명','등급명', '유통단계별 무게 ', '유통단계별 단위 ']).apply(lambda x: create_shifted_features(x, '전달 평균가격(원) PreVious MMonth')).reset_index(drop=True)
shifted_data = shifted_data.groupby(['품목명', '품목코드 ', '품종코드 ', '품종명','등급명', '유통단계별 무게 ', '유통단계별 단위 ']).apply(lambda x: create_shifted_features(x, '전년 평균가격(원) PreVious YeaR')).reset_index(drop=True)
shifted_data = shifted_data.groupby(['품목명', '품목코드 ', '품종코드 ', '품종명','등급명', '유통단계별 무게 ', '유통단계별 단위 ']).apply(lambda x: create_shifted_features(x, '평년 평균가격(원) Common Year SOON')).reset_index(drop=True)

shifted_data = shifted_data.groupby(['품목명', '품목코드 ', '품종코드 ', '품종명','등급명', '유통단계별 무게 ', '유통단계별 단위 ']).apply(lambda x: create_future_features(x, '평균가격(원)')).reset_index(drop=True)
shifted_data = shifted_data.dropna()
shifted_data.rename(columns={'평균가격(원)_1순': '1순', '평균가격(원)_2순': '2순', '평균가격(원)_3순' : '3순'}, inplace=True)
shifted_data.to_csv('train_2_v2.csv',index=False, encoding='CP949')


############## STEP 3 ##############
train_file_path = 'train_2_v2.csv'
train_df = pd.read_csv(train_file_path, encoding='cp949')

data = {
    '품목명': ['건고추', '깐마늘(국산)', '상추', '사과', '배'],
    '품종명' : ['화건', '깐마늘(국산)', '청', '후지홍로', '신고'],
    '유통단계별 단위 ': [30, 20, 100, 10, 10],
    '등급명': ['상품', '상품', '상품', '상품', '상품']
}

df = pd.DataFrame(data)
transformed_item_dfs = {}

for _, criteria in df.iterrows():
    item = criteria['품목명']
    main_variety = criteria['품종명']
    main_unit = criteria['유통단계별 단위 ']
    main_grade = criteria['등급명']

    main_variety_df = train_df[
        (train_df['품목명'] == item) &
        (train_df['품종명'] == main_variety) &
        (train_df['유통단계별 단위 '] == main_unit) &
        (train_df['등급명'] == main_grade)
    ].reset_index(drop=True)

    other_varieties_df = train_df[
        (train_df['품목명'] == item) &
        ~(
            (train_df['품종명'] == main_variety) &
            (train_df['유통단계별 단위 '] == main_unit) &
            (train_df['등급명'] == main_grade)
        )
    ].reset_index(drop=True)

    pivoted_varieties_df = other_varieties_df.pivot_table(
        index='YYYYMMSOON',
        columns=['품종명', '유통단계별 단위 ', '등급명'],
        values=[col for col in other_varieties_df.columns if col not in ['YYYYMMSOON', '품목명', '품종명', '유통단계별 단위 ', '등급명']],
        aggfunc='mean'
    ).reset_index()

    pivoted_varieties_df.columns = ['_'.join([str(c) for c in col if c]).strip() if isinstance(col, tuple) else col for col in pivoted_varieties_df.columns]
    merged_df = pd.merge(main_variety_df, pivoted_varieties_df, on='YYYYMMSOON', how='left')

    if item not in transformed_item_dfs:
        transformed_item_dfs[item] = []
    transformed_item_dfs[item].append(merged_df)

final_item_dfs = {item: pd.concat(dfs, ignore_index=True) for item, dfs in transformed_item_dfs.items()}

columns_to_keep = ['1순', '2순', '3순']
for item, df in final_item_dfs.items():
    columns_to_exclude = df.columns[df.columns.str.contains('1순|2순|3순') & ~df.columns.isin(columns_to_keep)]
    final_item_dfs[item] = df.drop(columns=columns_to_exclude)

for item, df in final_item_dfs.items():
    if (item != '건고추'):
      meta1 = pd.read_csv(f'6_감자 수미_반입물량.xlsx_241023/{item}_반입물량.csv', encoding = 'cp949').sort_values('YYYYMMSOON').reset_index(drop = True)
      meta1 = meta1[['YYYYMMSOON','총반입량']]
      meta1 = create_shifted_features(meta1,'총반입량').dropna()
    if (item != '상추'):
      meta2 = pd.read_csv(f'농촌경제연구원/{item}_확정거래물량.csv', encoding = 'cp949').sort_values('YYYYMMSOON').reset_index(drop = True)
      meta2.drop('품목명', axis = 1, inplace = True)
      for col in meta2.columns.difference(['품목명', 'YYYYMMSOON']):
        meta2 = create_shifted_features(meta2,col)
    meta2.dropna()
    merge_df = pd.merge(df, meta1, on='YYYYMMSOON', how='inner')
    merge_df = pd.merge(merge_df, meta2, on='YYYYMMSOON', how='inner')

    weather = pd.read_csv('weather.csv', encoding = 'cp949').reset_index(drop = True)
    for col in weather.columns.difference(['YYYYMMSOON']):
      weather = create_shifted_features(weather, col)
    merge_df = pd.merge(merge_df, weather, on='YYYYMMSOON', how='left')

    inout = pd.read_csv('inout.csv', encoding = 'utf-8').reset_index(drop = True)
    item_df = inout[[col for col in inout.columns if item in col and f"{item}추" not in col] + ['YYYYMMSOON']]

    for col in item_df.columns.difference(['YYYYMMSOON']):
      item_df = create_shifted_features(item_df, col)
    merge_df = pd.merge(merge_df, item_df, on='YYYYMMSOON', how='left')

    oil = pd.read_csv('oil.csv').reset_index(drop = True)
    merge_df = pd.merge(merge_df, oil, on='YYYYMMSOON', how='left')

    if (item != '건고추'):
        wide = pd.read_csv('wide.csv').reset_index(drop=True)
        wide_df = wide[[col for col in wide.columns if item in col and f"{item}추" not in col] + ['YYYYMMSOON']]
        wide_df = create_shifted_features(wide_df, f'{item}_총반입량')
        merge_df = pd.merge(merge_df, wide_df, on='YYYYMMSOON', how='left')

    merge_df.to_csv(f'train_{item}.csv', index=False, encoding='cp949')

import pandas as pd
import os

def process_file1(data):
    columns_to_shift = [
        'YYYYMMSOON',
        '평균가격(원)',
        '전순 평균가격(원) PreVious SOON',
        '전달 평균가격(원) PreVious MMonth',
        '전년 평균가격(원) PreVious YeaR',
        '평년 평균가격(원) Common Year SOON'
    ]
    group_cols = ['품목(품종)명', '가락시장 품목코드(5자리)', '거래단위', '등급(특 5% 상 35% 중 40% 하 20%)', '시점']
    num_shifts = 8

    for col in columns_to_shift:
        for i in range(1, num_shifts + 1):
            data[f'{col}_T-{i}'] = data.groupby(group_cols)[col].shift(i)

    data['1순'] = 0
    data['2순'] = 0
    data['3순'] = 0

    return data

def process_file2(data):
    columns_to_shift = [
        'YYYYMMSOON',
        '평균가격(원)',
        '전순 평균가격(원) PreVious SOON',
        '전달 평균가격(원) PreVious MMonth',
        '전년 평균가격(원) PreVious YeaR',
        '평년 평균가격(원) Common Year SOON'
    ]
    group_cols = ['품목명', '품목코드 ', '품종코드 ', '품종명','등급명', '유통단계별 무게 ', '유통단계별 단위 ','시점']
    num_shifts = 8

    for col in columns_to_shift:
        for i in range(1, num_shifts + 1):
            data[f'{col}_T-{i}'] = data.groupby(group_cols)[col].shift(i)

    data['1순'] = 0
    data['2순'] = 0
    data['3순'] = 0

    return data

def process_item_data1(train_data, item_list, item_name):
    train_item = train_data[train_data['품목(품종)명'].str.contains(item_name, na=False)]
    train_item['sort'] = train_item['품목(품종)명'] + train_item['거래단위'] + train_item['등급(특 5% 상 35% 중 40% 하 20%)']
    train_item = train_item[train_item['sort'].isin(item_list)]
    train_item = train_item.sort_values(by=['sort', 'YYYYMMSOON']).reset_index(drop=True)
    train_item.drop(['sort'], axis=1, inplace=True)
    return train_item

def process_item_data2(train_data, item_list, item_name):
    train_item = train_data[train_data['품목명'].str.contains(item_name, na=False)]
    train_item['sort'] = train_item['품목명'] + train_item['품종명'] + train_item['유통단계별 단위 '].astype(str) + train_item['등급명']
    train_item = train_item[train_item['sort'].isin(item_list)]
    train_item = train_item.sort_values(by=['sort', 'YYYYMMSOON']).reset_index(drop=True)
    if item_name == '사과':
      train_item.loc[(train_item['품종명'] == '후지'), '품종명'] = '후지홍로'
      train_item.loc[(train_item['품종명'] == '홍로'), '품종명'] = '후지홍로'
      train_item.loc[(train_item['품종명'] == '후지홍로'), '품종코드 '] = 0
    train_item.drop(['sort'], axis=1, inplace=True)
    return train_item

"""# Test_1"""

############## STEP 1 ##############
all_data = []

time1 = []
time2 = []
for i in range(52):
    file_name = f'TEST_{i:02d}_1.csv'
    file_path = os.path.join('test/', file_name)
    data = pd.read_csv(file_path)
    file_name_other = f'TEST_경락정보_가락도매_{i:02d}.csv'
    file_path_other = os.path.join('test/meta/', file_name_other)
    data_other = pd.read_csv(file_path_other)
    data = pd.concat([data,data_other],axis=0)
    시점 = file_name.replace('.csv', '')
    data['시점'] = 시점

    origin_T = data['YYYYMMSOON'].max()
    time1.append(origin_T)
    time2.append(시점)
    data = data.reset_index(drop = True)
    all_data.append(data)

test_1 = pd.concat(all_data, ignore_index=True)
time_pairs = list(zip(time1, time2))

cabbage_list = ['알배기배추8키로상자상', '알배기배추8키로상자특', '알배기배추8키로상자중', '쌈배추8키로상자하', '얼갈이배추4키로상자하',
                '쌈배추8키로상자특', '배추10키로망대하', '얼갈이배추4키로상자상', '얼갈이배추4키로상자중', '배추10키로망대상',
                '배추10키로망대중', '쌈배추8키로상자상', '쌈배추8키로상자중', '알배기배추8키로상자하', '배추10키로망대특']
moo_list = ['무20키로상자중', '열무4키로상자중', '열무4키로상자하', '무20키로상자상', '열무1.5키로단상', '무20키로상자하',
            '열무1.5키로단중', '열무1.5키로단하', '무20키로상자특', '열무4키로상자상']
onion_list = ['양파1키로중', '양파12키로특', '양파15키로중', '양파12키로하', '양파1키로상', '양파15키로하', '양파15키로상',
              '양파1키로하', '양파12키로중', '양파15키로특', '양파1키로특', '양파12키로상']
potato_list = ['감자 수미20키로상자특', '감자 수미20키로상자하', '감자 수미20키로상자상', '감자 수미20키로상자중']
daepa_list = ['대파(일반)1키로단상', '대파(일반)1키로단중', '대파(일반)1키로단하', '대파(일반)1키로단특']

test_1_cabbage = process_item_data1(test_1, cabbage_list, '배추')
test_1_moo = process_item_data1(test_1, moo_list, '무')
test_1_onion= process_item_data1(test_1, onion_list, '양파')
test_1_potato = process_item_data1(test_1, potato_list, '감자')
test_1_daepa = process_item_data1(test_1, daepa_list, '대파')
test_1_all = pd.concat([test_1_cabbage, test_1_moo, test_1_onion, test_1_potato, test_1_daepa], axis=0).reset_index(drop=True)

test_1_all.to_csv('test_1_all.csv', index=False, encoding='utf-8')

############## STEP 2 ##############
df = pd.read_csv('test_1_all.csv')
final_data = process_file1(df)

filtered_df_list = []  # 필터링된 결과를 담을 리스트

for t1, t2 in time_pairs:
    temp_df = final_data[(final_data['YYYYMMSOON'] == t1) & (final_data['시점'] == t2)].copy()  # 먼저 time1 조건으로 필터링
    if not temp_df.empty:
        filtered_df_list.append(temp_df)

if filtered_df_list:
    final_data = pd.concat(filtered_df_list)
else:
    final_data = pd.DataFrame()
final_data = final_data.reset_index(drop = True)
final_data.to_csv('test_1_v2_bf.csv',index=False, encoding='CP949')

final_data_potato = final_data[(final_data['품목(품종)명'] == '감자 수미') & (final_data['거래단위'] == '20키로상자') & (final_data['등급(특 5% 상 35% 중 40% 하 20%)'] == '상')].reset_index(drop = True)
final_data_moo = final_data[(final_data['품목(품종)명'] == '무') & (final_data['거래단위'] == '20키로상자') & (final_data['등급(특 5% 상 35% 중 40% 하 20%)'] == '상')].reset_index(drop = True)
final_data_cabbage = final_data[(final_data['품목(품종)명'] == '배추') & (final_data['거래단위'] == '10키로망대') & (final_data['등급(특 5% 상 35% 중 40% 하 20%)'] == '상')].reset_index(drop = True)
final_data_onion = final_data[(final_data['품목(품종)명'] == '양파') & (final_data['거래단위'] == '1키로') & (final_data['등급(특 5% 상 35% 중 40% 하 20%)'] == '상')].reset_index(drop = True)
final_data_daepa = final_data[(final_data['품목(품종)명'] == '대파(일반)') & (final_data['거래단위'] == '1키로단') & (final_data['등급(특 5% 상 35% 중 40% 하 20%)'] == '상')].reset_index(drop = True)

Filter_final_data = pd.concat([final_data_potato, final_data_moo,  final_data_cabbage, final_data_onion, final_data_daepa],axis=0).reset_index(drop = True)
Filter_final_data.to_csv('test_1_v2.csv',index=False, encoding='CP949')

############## STEP 3 ##############
test_df = pd.read_csv('test_1_v2.csv', encoding='cp949')
train_df = pd.read_csv('test_1_v2_bf.csv', encoding='cp949')

data = {
    '품목(품종)명': ['배추', '무', '양파', '감자 수미', '대파(일반)'],
    '거래단위': ['10키로망대', '20키로상자', '1키로', '20키로상자', '1키로단'],
    '등급(특 5% 상 35% 중 40% 하 20%)': ['상', '상', '상', '상', '상']
}
df = pd.DataFrame(data)

transformed_item_dfs = {}

for _, criteria in df.iterrows():
    item = criteria['품목(품종)명']
    main_unit = criteria['거래단위']
    main_grade = criteria['등급(특 5% 상 35% 중 40% 하 20%)']

    main_variety_df = train_df[
        (train_df['품목(품종)명'] == item) &
        (train_df['거래단위'] == main_unit) &
        (train_df['등급(특 5% 상 35% 중 40% 하 20%)'] == main_grade)
    ].reset_index(drop=True)

    other_varieties_df = train_df[
        (train_df['품목(품종)명'] == item) &
        ~((train_df['거래단위'] == main_unit) &
          (train_df['등급(특 5% 상 35% 중 40% 하 20%)'] == main_grade))
    ].reset_index(drop=True)

    pivoted_varieties_df = other_varieties_df.pivot_table(
        index='YYYYMMSOON',
        columns=['거래단위', '등급(특 5% 상 35% 중 40% 하 20%)'],
        values=[col for col in other_varieties_df.columns
                if col not in ['YYYYMMSOON', '품목(품종)명', '거래단위', '등급(특 5% 상 35% 중 40% 하 20%)']],
        aggfunc='mean'
    ).reset_index()

    pivoted_varieties_df.columns = ['_'.join([str(c) for c in col if c]).strip()
                                    if isinstance(col, tuple) else col for col in pivoted_varieties_df.columns]
    merged_df = pd.merge(main_variety_df, pivoted_varieties_df, on='YYYYMMSOON', how='left')

    if item not in transformed_item_dfs:
        transformed_item_dfs[item] = []
    transformed_item_dfs[item].append(merged_df)

for item, dfs in transformed_item_dfs.items():
    for i in range(len(dfs)):
        dfs[i] = dfs[i].drop(['시점'], axis=1)

final_item_dfs = {item: pd.concat(dfs, ignore_index=True) for item, dfs in transformed_item_dfs.items()}

columns_to_keep = ['1순', '2순', '3순']
for item, df in final_item_dfs.items():
    columns_to_exclude = df.columns[df.columns.str.contains('1순|2순|3순') & ~df.columns.isin(columns_to_keep)]
    final_item_dfs[item] = df.drop(columns=columns_to_exclude)

for item, df in final_item_dfs.items():

    if (item != '대파(일반)'):
      meta1 = pd.read_csv(f'6_감자 수미_반입물량.xlsx_241023/{item}_반입물량.csv', encoding = 'cp949').sort_values('YYYYMMSOON').reset_index(drop = True)
      meta1 = meta1[['YYYYMMSOON','총반입량']]
      meta1 = create_shifted_features(meta1,'총반입량').dropna()
    meta2 = pd.read_csv(f'농촌경제연구원/{item}_확정거래물량.csv', encoding = 'cp949').sort_values('YYYYMMSOON').reset_index(drop = True)
    meta2.drop('품목명', axis = 1, inplace = True)
    for col in meta2.columns.difference(['품목명', 'YYYYMMSOON']):
      meta2 = create_shifted_features(meta2,col)
    meta2.dropna()
    merge_df = pd.merge(df, meta1, on='YYYYMMSOON', how='left')
    merge_df = pd.merge(merge_df, meta2, on='YYYYMMSOON', how='left')

    weather = pd.read_csv('weather.csv', encoding = 'cp949').reset_index(drop = True)
    for col in weather.columns.difference(['YYYYMMSOON']):
      weather = create_shifted_features(weather, col)
    merge_df = pd.merge(merge_df, weather, on='YYYYMMSOON', how='left')

    inout = pd.read_csv('inout.csv', encoding = 'utf-8').reset_index(drop = True)
    item_df = inout[[col for col in inout.columns if item in col] + ['YYYYMMSOON']]  # 'item' 키워드가 포함된 컬럼만 선택

    for col in item_df.columns.difference(['YYYYMMSOON']):
      item_df = create_shifted_features(item_df, col)
    merge_df = pd.merge(merge_df, item_df, on='YYYYMMSOON', how='left')

    oil = pd.read_csv('oil.csv').reset_index(drop = True)
    merge_df = pd.merge(merge_df, oil, on='YYYYMMSOON', how='left')

    wide = pd.read_csv('wide_test.csv', encoding = 'cp949').reset_index(drop = True)
    wide_df = wide[[col for col in wide.columns if item in col and f"{item}추" not in col] + ['YYYYMMSOON']]
    merge_df = pd.merge(merge_df, wide_df, on='YYYYMMSOON', how='left')

    merge_df.to_csv(f'test_{item}.csv', index=False, encoding='cp949')

"""# Test_2"""

############## STEP 1 ##############

all_data = []
for i in range(52):
    file_name = f'TEST_{i:02d}_2.csv'
    file_path = os.path.join('test/', file_name)
    data = pd.read_csv(file_path)
    file_name_other = f'TEST_중도매_{i:02d}.csv'
    file_path_other = os.path.join('test/meta/', file_name_other)
    data_other = pd.read_csv(file_path_other)
    data = pd.concat([data,data_other],axis=0)

    시점 = file_name.replace('.csv', '')
    data['시점'] = 시점
    data = data.reset_index(drop = True)
    all_data.append(data)

test_2 = pd.concat(all_data, ignore_index=True)

gochu_list = ['건고추화건30.0중품', '건고추화건30.0상품']
garlic_list = ['깐마늘(국산)깐마늘(남도)20.0중품', '깐마늘(국산)깐마늘(국산)20.0상품', '깐마늘(국산)깐마늘(대서)20.0중품']

test_2_gochu = process_item_data2(test_2, gochu_list, '고추')
test_2_garlic = process_item_data2(test_2, garlic_list, '마늘')

all_data = []
time1 = []
time2 = []
for i in range(52):
    file_name = f'TEST_{i:02d}_2.csv'
    file_path = os.path.join('test/', file_name)
    data = pd.read_csv(file_path)
    file_name_other = f'TEST_소매_{i:02d}.csv'
    file_path_other = os.path.join('test/meta/', file_name_other)
    data_other = pd.read_csv(file_path_other)
    data = pd.concat([data,data_other],axis=0)

    origin_T = data['YYYYMMSOON'].max()
    시점 = file_name.replace('.csv', '')
    time1.append(origin_T)
    time2.append(시점)

    data['시점'] = 시점
    data = data.reset_index(drop = True)
    all_data.append(data)

test_2 = pd.concat(all_data, ignore_index=True)
time_pairs = list(zip(time1, time2))

lettuce_list = ['상추적100.0중품', '상추청100.0상품', '상추적100.0상품']
pear_list = ['배신고10.0중품', '배신고10.0상품']
apple_list = ['사과후지10.0상품', '사과후지10.0중품', '사과홍로10.0중품', '사과홍로10.0상품']

test_2_lettuce = process_item_data2(test_2, lettuce_list, '상추')
test_2_pear = process_item_data2(test_2, pear_list, '배')

# 사과
test_2_apple = test_2[test_2['품목명'].str.contains('사과', na=False)]
apple = ['사과후지10.0상품', '사과후지10.0중품', '사과홍로10.0중품', '사과홍로10.0상품']
test_2_apple['sort'] = test_2_apple['품목명'] + test_2_apple['품종명'] + test_2_apple['유통단계별 단위 '].astype(str) + test_2_apple['등급명']
test_2_apple.sort_values(by=['YYYYMMSOON','sort'], inplace=True)
test_2_apple = test_2_apple[test_2_apple['sort'].isin(apple)]
test_2_apple = test_2_apple.reset_index(drop = True)

test_2_apple.loc[(test_2_apple['품종명'] == '후지'), '품종명'] = '후지홍로'
test_2_apple.loc[(test_2_apple['품종명'] == '홍로'), '품종명'] = '후지홍로'
test_2_apple.loc[(test_2_apple['품종명'] == '후지홍로'), '품종코드 '] = 0
test_2_apple.drop(['sort'],axis=1,inplace=True)

test_2_all = pd.concat([test_2_gochu, test_2_garlic, test_2_lettuce, test_2_pear, test_2_apple], axis=0).reset_index(drop=True)

test_2_all.to_csv('test_2_all.csv', index=False, encoding='utf-8')

############## STEP 2 ##############

df = pd.read_csv('test_2_all.csv')
final_data = process_file2(df)

filtered_df_list = []  # 필터링된 결과를 담을 리스트

for t1, t2 in time_pairs:
    temp_df = final_data[(final_data['YYYYMMSOON'] == t1) & (final_data['시점'] == t2)].copy()  # 먼저 time1 조건으로 필터링
    if not temp_df.empty:
        filtered_df_list.append(temp_df)

if filtered_df_list:
    final_data = pd.concat(filtered_df_list)
else:
    final_data = pd.DataFrame()
final_data = final_data.reset_index(drop = True)
final_data.to_csv('test_2_v2_bf.csv',index=False, encoding='CP949')

final_data_gochu = final_data[(final_data['품목명'] == '건고추') & (final_data['품종명'] == '화건') & (final_data['유통단계별 단위 '] == 30) & (final_data['등급명'] == '상품')].reset_index(drop = True)
final_data_apple = final_data[(final_data['품목명'] == '사과') & (final_data['품종명'] == '후지홍로') & (final_data['유통단계별 단위 '] == 10) & (final_data['등급명'] == '상품')].reset_index(drop = True)
final_data_pear = final_data[(final_data['품목명'] == '배') & (final_data['품종명'] == '신고') & (final_data['유통단계별 단위 '] == 10) & (final_data['등급명'] == '상품')].reset_index(drop = True)
final_data_garlic = final_data[(final_data['품목명'] == '깐마늘(국산)') & (final_data['품종명'] == '깐마늘(국산)') & (final_data['유통단계별 단위 '] == 20) & (final_data['등급명'] == '상품')].reset_index(drop = True)
final_data_lettuce = final_data[(final_data['품목명'] == '상추') & (final_data['품종명'] == '청') & (final_data['유통단계별 단위 '] == 100) & (final_data['등급명'] == '상품')].reset_index(drop = True)
Filter_final_data = pd.concat([final_data_gochu, final_data_apple, final_data_pear, final_data_garlic, final_data_lettuce],axis=0).reset_index(drop = True)
Filter_final_data.to_csv('test_2_v2.csv',index=False, encoding='CP949')

############## STEP 3 ##############

test_df = pd.read_csv('test_2_v2.csv', encoding='cp949')
train_df = pd.read_csv('test_2_v2_bf.csv', encoding='cp949')

data = {
    '품목명': ['건고추', '깐마늘(국산)', '상추', '사과', '배'],
    '품종명' : ['화건', '깐마늘(국산)', '청', '후지홍로', '신고'],
    '유통단계별 단위 ': [30, 20, 100, 10, 10],
    '등급명': ['상품', '상품', '상품', '상품', '상품']
}

df = pd.DataFrame(data)
transformed_item_dfs = {}

for _, criteria in df.iterrows():
    item = criteria['품목명']
    main_variety = criteria['품종명']
    main_unit = criteria['유통단계별 단위 ']
    main_grade = criteria['등급명']

    main_variety_df = train_df[
        (train_df['품목명'] == item) &
        (train_df['품종명'] == main_variety) &
        (train_df['유통단계별 단위 '] == main_unit) &
        (train_df['등급명'] == main_grade)
    ].reset_index(drop=True)

    other_varieties_df = train_df[
        (train_df['품목명'] == item) &
        ~(
            (train_df['품종명'] == main_variety) &
            (train_df['유통단계별 단위 '] == main_unit) &
            (train_df['등급명'] == main_grade)
        )
    ].reset_index(drop=True)

    pivoted_varieties_df = other_varieties_df.pivot_table(
        index='YYYYMMSOON',
        columns=['품종명', '유통단계별 단위 ', '등급명'],
        values=[col for col in other_varieties_df.columns if col not in ['YYYYMMSOON', '품목명', '품종명', '유통단계별 단위 ', '등급명']],
        aggfunc='mean'
    ).reset_index()

    pivoted_varieties_df.columns = ['_'.join([str(c) for c in col if c]).strip() if isinstance(col, tuple) else col for col in pivoted_varieties_df.columns]
    merged_df = pd.merge(main_variety_df, pivoted_varieties_df, on='YYYYMMSOON', how='left')

    if item not in transformed_item_dfs:
        transformed_item_dfs[item] = []
    transformed_item_dfs[item].append(merged_df)

for item, dfs in transformed_item_dfs.items():
    for i in range(len(dfs)):
        dfs[i] = dfs[i].drop(['시점'], axis=1)

final_item_dfs = {item: pd.concat(dfs, ignore_index=True) for item, dfs in transformed_item_dfs.items()}

columns_to_keep = ['1순', '2순', '3순']
for item, df in final_item_dfs.items():
    columns_to_exclude = df.columns[df.columns.str.contains('1순|2순|3순') & ~df.columns.isin(columns_to_keep)]
    final_item_dfs[item] = df.drop(columns=columns_to_exclude)


for item, df in final_item_dfs.items():
    if (item != '건고추'):
      meta1 = pd.read_csv(f'6_감자 수미_반입물량.xlsx_241023/{item}_반입물량.csv', encoding = 'cp949').sort_values('YYYYMMSOON').reset_index(drop = True)
      meta1 = meta1[['YYYYMMSOON','총반입량']]
      meta1 = create_shifted_features(meta1,'총반입량').dropna()

    if (item != '상추'):
      meta2 = pd.read_csv(f'농촌경제연구원/{item}_확정거래물량.csv', encoding = 'cp949').sort_values('YYYYMMSOON').reset_index(drop = True)
      meta2.drop('품목명', axis = 1, inplace = True)
      for col in meta2.columns.difference(['품목명', 'YYYYMMSOON']):
        meta2 = create_shifted_features(meta2,col)
    meta2.dropna()
    merge_df = pd.merge(df, meta1, on='YYYYMMSOON', how='inner')
    merge_df = pd.merge(merge_df, meta2, on='YYYYMMSOON', how='inner')

    weather = pd.read_csv('weather.csv', encoding = 'cp949').reset_index(drop = True)
    for col in weather.columns.difference(['YYYYMMSOON']):
      weather = create_shifted_features(weather, col)
    merge_df = pd.merge(merge_df, weather, on='YYYYMMSOON', how='left')


    inout = pd.read_csv('inout.csv', encoding = 'utf-8').reset_index(drop = True)
    item_df = inout[[col for col in inout.columns if item in col and f"{item}추" not in col] + ['YYYYMMSOON']]

    for col in item_df.columns.difference(['YYYYMMSOON']):
      item_df = create_shifted_features(item_df, col)
    merge_df = pd.merge(merge_df, item_df, on='YYYYMMSOON', how='left')


    oil = pd.read_csv('oil.csv').reset_index(drop = True)
    merge_df = pd.merge(merge_df, oil, on='YYYYMMSOON', how='left')

    if (item != '건고추'):
        wide = pd.read_csv('wide_test.csv', encoding = 'cp949').reset_index(drop=True)
        wide_df = wide[[col for col in wide.columns if item in col and f"{item}추" not in col] + ['YYYYMMSOON']]
        merge_df = pd.merge(merge_df, wide_df, on='YYYYMMSOON', how='left')

    merge_df.to_csv(f'test_{item}.csv', index=False, encoding='cp949')

